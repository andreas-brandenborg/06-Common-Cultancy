Index: Server/server.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst cors = require('cors');\r\nconst db = require('mysql2');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst connection = db.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: process.env.dbpassword,\r\n    database: \"facebook\"\r\n});\r\n\r\napp.get('/test',(req,res)=> {\r\n    let q = `SELECT * FROM classification LIMIT 1`;\r\n    connection.query(q, (error, results)=>{\r\n        res.send(results);\r\n    })\r\n});\r\n\r\n// Result: [{\"yearmonth\": \"2019-01\", \"interactions_yearmonth\": \"110\"}, ...]\r\napp.get('/total-interactions',(req,res)=> {\r\n    let q = `SELECT yearmonth, SUM(total_interactions) as interactions_yearmonth\r\n                    FROM metrics\r\n                    INNER JOIN time ON time.ccpost_id = metrics.ccpost_id\r\n                    Where yearmonth > 2021\r\n                    GROUP BY yearmonth\r\n                    ORDER BY yearmonth;`;\r\n    connection.query(q, (error, results)=>{\r\n        res.send(results);\r\n    })\r\n});\r\n\r\napp.get('/negative-posts',(req,res)=> {\r\n    let q = `SELECT * FROM classification LIMIT 1`;\r\n    connection.query(q, (error, results)=>{\r\n        res.send(results);\r\n    })\r\n});\r\n\r\napp.get('/economic-support',(req,res)=> {\r\n    let q = `SELECT * FROM classification LIMIT 1`;\r\n    connection.query(q, (error, results)=>{\r\n        res.send(results);\r\n    })\r\n});\r\n\r\napp.get('/social-media-posts',(req,res)=> {\r\n    let q = `SELECT * FROM classification LIMIT 1`;\r\n    connection.query(q, (error, results)=>{\r\n        res.send(results);\r\n    })\r\n});\r\n\r\n// Start server. Needs to be below end points.\r\napp.listen(port, ()=>{\r\n    console.log(\"Hey guys we are officially LIVE !!!!\");\r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/server.js b/Server/server.js
--- a/Server/server.js	(revision bcb0726fdded3f9e555ea80773ba919a5703e338)
+++ b/Server/server.js	(date 1734001376561)
@@ -59,4 +59,4 @@
 // Start server. Needs to be below end points.
 app.listen(port, ()=>{
     console.log("Hey guys we are officially LIVE !!!!");
-});
\ No newline at end of file
+});
Index: Client/client.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const dataDOM = document.querySelector(\"#data\");\r\nconst ctx = document.querySelector('#chart').getContext('2d');\r\n\r\nshowLineChart();\r\ncreateSocialMediaBar();\r\ncreateEconomicSupportBar();\r\n\r\nfetchMonthData = [];\r\nfetchInteractions = [];\r\n\r\n//Handlers\r\n//handler for fetch data, loop af data, og push til array, fungerer p√• alle endpoints\r\nfunction getLabels(data, labelKey) {\r\n    let datalabels = []; // tomt array\r\n    for (let i = 0; i < data.length; i++) { // itererer gennem array af data fra mysql\r\n        datalabels.push(data[i][labelKey]); // array push alt med parametrne som er sql kolonne navn\r\n    }\r\n    return datalabels; // returnerer fyldte array\r\n}\r\n\r\nfunction getValues(data, valueKey) {\r\n    let datavalues = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        datavalues.push(data[i][valueKey]); //\r\n    }\r\n    return datavalues; // Return the array\r\n}\r\n\r\nfunction getEndpointData(endpoint, labelKey, valueKey) {\r\n    return fetch(endpoint) // tager en parameter endpoint og henter data\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const labels = getLabels(data, labelKey);// tager svaret json svar som params\r\n            const values = getValues(data, valueKey);// handlers der samler dataen til grafer\r\n            return { labels, values }; // returner et array af labels,values\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching data:', error);\r\n        });\r\n}\r\n\r\nasync function showLineChart() {\r\n    const { labels, values } = await getEndpointData\r\n        (\"http://localhost:3000/total-interactions\",// endpoint for dataFetch fra sql\r\n         \"interactions_yearmonth\", //kolonne i sql med Labels, iterer gennem array push til labels\r\n         \"yearmonth\"); // rinse-repeat for Values\r\n    createChart(labels, values); // skaber charten med labelsne og valuesne\r\n    console.log(labels,values)\r\n}\r\n\r\nasync function showSocialMediaBar() {\r\n    const { labels, values } = await getEndpointData\r\n    (\"http://localhost:3000/total-interactions\",// endpoint for dataFetch fra sql\r\n        \"interactions_yearmonth\", //kolonne i sql med Labels, iterer gennem array push til labels\r\n        \"yearmonth\"); // rinse-repeat for Values\r\n    createChart(labels, values); // skaber charten med labelsne og valuesne\r\n    console.log(labels,values)\r\n}\r\n\r\nasync function showEconomicSupportBar() {\r\n    const { labels, values } = await getEndpointData\r\n    (\"http://localhost:3000/economic-support\",// endpoint for dataFetch fra sql\r\n        \"interactions_yearmonth\", //kolonne i sql med Labels, iterer gennem array push til labels\r\n        \"yearmonth\"); // rinse-repeat for Values\r\n    createChart(labels, values); // skaber charten med labelsne og valuesne\r\n    console.log(labels,values)\r\n}\r\n\r\n/*/\r\ndisplaySecondPost();\r\n\r\nfunction displaySecondPost() {\r\n        fetch(\"http://localhost:3000/total-interactions\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                    for (let i = 0; i < data.length; i++) {\r\n                            fetchMonthData.push(data[i].yearmonth);\r\n                            fetchInteractions.push(data[i].interactions_yearmonth);\r\n                    }\r\n                    createChart();\r\n            })\r\n            .catch(error => {\r\n                    console.error('Error fetching data:', error);\r\n            });\r\n}\r\n /*/\r\nfunction createChart(values,labels){\r\n\r\n    const chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Total interaktioner',\r\n                data: values, // Use the yValue array for the chart data\r\n                borderColor: ['#B60104'],\r\n                backgroundColor: 'rgba(182, 1, 4, 0.3)',\r\n                tension: 0.4,\r\n                borderWidth: 2.5,\r\n                fill: true\r\n            }],\r\n            labels: labels // Use the xValue array for the chart labels\r\n        },\r\n        options: {\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                y: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\",\r\n                        callback: function (value, index, values) {\r\n                            if (value >= 1000000) {\r\n                                return (value / 1000000) + ' mil';\r\n                            }\r\n                            return value;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Total interaktioner',\r\n                },\r\n                legend: {\r\n                    position: 'bottom'\r\n                },\r\n                tooltip: {\r\n                    enabled: true,\r\n                    backgroundColor: \"black\"\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction createSocialMediaBar() {\r\n    // For some reason, we can't have this as a global variable.\r\n    const socialMediaBar = document.querySelector(\"#social-media-bar\").getContext('2d');\r\n    const chart = new Chart(socialMediaBar, {\r\n        type: 'bar',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Social Media Interactions',\r\n                data: [200, 60, 30],\r\n                borderColor: ['#B60104'],\r\n                backgroundColor: 'rgba(182, 1, 4, 0.3)',\r\n                tension: 0.4,\r\n                borderWidth: 2.5,\r\n                fill: true\r\n            }],\r\n            labels: [\"2022\", \"2023\", \"2024\"]\r\n        },\r\n        options: {\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                y: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\",\r\n                        callback: function (value, index, values) {\r\n                            if (value >= 1000000) {\r\n                                return (value / 1000000) + ' mil';\r\n                            }\r\n                            return value;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Social Media Interactions',\r\n                },\r\n                legend: {\r\n                    position: ''\r\n                },\r\n                tooltip: {\r\n                    enabled: true,\r\n                    backgroundColor: \"black\"\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction createEconomicSupportBar() {\r\n    // For some reason, we can't have this as a global variable.\r\n    const socialMediaBar = document.querySelector(\"#economic-support-bar\").getContext('2d');\r\n    const chart = new Chart(socialMediaBar, {\r\n        type: 'bar',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Economic Support',\r\n                data: [200, 60, 30],\r\n                borderColor: ['#B60104'],\r\n                backgroundColor: 'rgba(182, 1, 4, 0.3)',\r\n                tension: 0.4,\r\n                borderWidth: 2.5,\r\n                fill: true\r\n            }],\r\n            labels: [\"2022\", \"2023\", \"2024\"]\r\n        },\r\n        options: {\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\"\r\n                    }\r\n                },\r\n                y: {\r\n                    grid: {\r\n                        display: false\r\n                    },\r\n                    ticks: {\r\n                        color: \"white\",\r\n                        callback: function (value, index, values) {\r\n                            if (value >= 1000000) {\r\n                                return (value / 1000000) + ' mil';\r\n                            }\r\n                            return value;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Economic Support',\r\n                },\r\n                legend: {\r\n                    position: ''\r\n                },\r\n                tooltip: {\r\n                    enabled: true,\r\n                    backgroundColor: \"black\"\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/*\r\nlet fetchMonthData = [];\r\nlet fetchInteractions = [];\r\nlet chart; // Global chart instance\r\nlet visiblePoints = 5; // Initial number of points to show\r\nconst scrollStep = 0.1; // Amount of points to add/remove per scroll\r\nlet scrollAccumulator = 0; // Accumulator for scroll events\r\n\r\n\r\n// Fetch data from your endpoint\r\nasync function displaySecondPost() {\r\n    fetch(\"http://localhost:3000/total-interactions\")\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            for (let i = 0; i < data.length; i++) {\r\n                fetchMonthData.push(data[i].yearmonth);\r\n                fetchInteractions.push(data[i].interactions_yearmonth);\r\n            }\r\n            createChart(); // Create chart after data is loaded\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching data:', error);\r\n        });\r\n}\r\n\r\n\r\n// Function to create the chart\r\nfunction createChart() {\r\n    const ctx = document.querySelector('#chart').getContext('2d');\r\n    chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n            datasets: [{\r\n                label: 'Total interaktioner',\r\n                data: fetchInteractions.slice(0, visiblePoints), // Start with a few points\r\n                borderColor: ['#B60104'],\r\n                backgroundColor: \"rgba(182, 1, 4, 0.2)\",\r\n                tension: 0.4,\r\n                borderWidth: 4\r\n            }],\r\n            labels: fetchMonthData.slice(0, visiblePoints) // Start with matching labels\r\n        },\r\n        options: {\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    }\r\n                },\r\n                y: {\r\n                    grid: {\r\n                        display: false\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Total interaktioner',\r\n                    color: \"white\"\r\n                },\r\n                legend: {\r\n                    position: '',\r\n                    labels: {\r\n                        color:\"white\"\r\n                    }\r\n                    },\r\n                tooltip: {\r\n                    enabled: true,\r\n                    backgroundColor: \"black\"\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n// Function to progressively reveal more points on scroll\r\nfunction updateChartOnScroll(event) {\r\n    // Accumulate the scroll delta\r\n    scrollAccumulator += event.deltaY > 0 ? scrollStep : -scrollStep;\r\n\r\n    // Only update visiblePoints when scrollAccumulator crosses a threshold\r\n    if (Math.abs(scrollAccumulator) >= 1) {\r\n        const change = Math.floor(scrollAccumulator); // Get the integer part of the accumulated scroll\r\n        scrollAccumulator -= change; // Remove the processed amount\r\n\r\n        // Update visiblePoints with the change and clamp within valid bounds\r\n        visiblePoints = Math.min(\r\n            fetchMonthData.length, // Max points available\r\n            Math.max(5, visiblePoints + change) // At least 5 points visible\r\n        );\r\n\r\n        // Update the chart data with the new range\r\n        chart.data.labels = fetchMonthData.slice(0, visiblePoints);\r\n        chart.data.datasets[0].data = fetchInteractions.slice(0, visiblePoints);\r\n\r\n        // Update the chart display\r\n        chart.update();\r\n    }\r\n}\r\n\r\n// Listen for scroll events\r\nwindow.addEventListener('wheel', updateChartOnScroll);\r\n\r\n// Fetch data and initialize chart\r\ndisplaySecondPost();\r\n\r\n*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Client/client.js b/Client/client.js
--- a/Client/client.js	(revision bcb0726fdded3f9e555ea80773ba919a5703e338)
+++ b/Client/client.js	(date 1734001376572)
@@ -47,7 +47,7 @@
     createChart(labels, values); // skaber charten med labelsne og valuesne
     console.log(labels,values)
 }
-
+async function show
 async function showSocialMediaBar() {
     const { labels, values } = await getEndpointData
     ("http://localhost:3000/total-interactions",// endpoint for dataFetch fra sql
